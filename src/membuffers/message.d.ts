import { FieldType } from "./types";
import { Iterator } from "./iterator";

export class InternalMessage {
  constructor(buf: Uint8Array, size: number, scheme: FieldType[], unions: FieldType[][]);
  isValid(): boolean;
  rawBuffer(): Uint8Array;
  rawBufferForField(fieldNum: number, unionNum: number): Uint8Array;
  rawBufferWithHeaderForField(fieldNum: number, unionNum: number): Uint8Array;
  getOffsetInOffset(off: number): number;
  getUint8InOffset(off: number): number;
  setUint8InOffset(off: number, v: number): void;
  getUint8(fieldNum: number): number;
  setUint8(fieldNum: number, v: number): void;
  getUint16InOffset(off: number): number;
  setUint16InOffset(off: number, v: number): void;
  getUint16(fieldNum: number): number;
  setUint16(fieldNum: number, v: number): void;
  getUint32InOffset(off: number): number;
  setUint32InOffset(off: number, v: number): void;
  getUint32(fieldNum: number): number;
  setUint32(fieldNum: number, v: number): void;
  getUint64InOffset(off: number): BigInt;
  setUint64InOffset(off: number, v: BigInt): void;
  getUint64(fieldNum: number): BigInt;
  setUint64(fieldNum: number, v: BigInt): void;
  getMessageInOffset(off: number): Uint8Array;
  getMessage(fieldNum: number): Uint8Array;
  getBytesInOffset(off: number): Uint8Array;
  setBytesInOffset(off: number, v: Uint8Array): void;
  getBytes(fieldNum: number): Uint8Array;
  setBytes(fieldNum: number, v: Uint8Array): void;
  getStringInOffset(off: number): string;
  setStringInOffset(off: number, v: string): void;
  getString(fieldNum: number): string;
  setString(fieldNum: number, v: string): void;
  getUnionIndex(fieldNum: number, unionNum: number): number;
  isUnionIndex(fieldNum: number, unionNum: number, unionIndex: number): [boolean, number];
  getUint8ArrayIteratorInOffset(off: number): Iterator;
  getUint8ArrayIterator(fieldNum: number): Iterator;
  getUint16ArrayIteratorInOffset(off: number): Iterator;
  getUint16ArrayIterator(fieldNum: number): Iterator;
  getUint32ArrayIteratorInOffset(off: number): Iterator;
  getUint32ArrayIterator(fieldNum: number): Iterator;
  getUint64ArrayIteratorInOffset(off: number): Iterator;
  getUint64ArrayIterator(fieldNum: number): Iterator;
  getMessageArrayIteratorInOffset(off: number): Iterator;
  getMessageArrayIterator(fieldNum: number): Iterator;
  getBytesArrayIteratorInOffset(off: number): Iterator;
  getBytesArrayIterator(fieldNum: number): Iterator;
  getStringArrayIteratorInOffset(off: number): Iterator;
  getStringArrayIterator(fieldNum: number): Iterator;
}